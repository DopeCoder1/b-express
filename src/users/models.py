from sqlalchemy import (Boolean, Column, Float, ForeignKey, Integer, String,
                        Table, UniqueConstraint, text)
from sqlalchemy.orm import relationship

from src.common.models import TimestampMixin
from src.database import Base


class Group(Base):
    __tablename__ = 'fastapi_auth_group'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(150), unique=True, index=True, comment="group name")

    def __str__(self):
        return self.name


class Users(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    email = Column(String, nullable=False)
    hashed_password = Column(String, nullable=True)
    is_superuser = Column(Boolean, server_default=text(
        'false'), comment="Are you a super administrator")
    is_active = Column(Boolean, server_default=text('true'),
                       comment="Whether to engrave to log in")
    is_delete = Column(Boolean, server_default=text(
        'false'), comment="delete or not")
    group_id = Column(Integer, ForeignKey("fastapi_auth_group.id"))
    driver_id = Column(Integer, ForeignKey('drivers.id'))
    driver = relationship("Driver", uselist=False)

class Driver(Base):
    __tablename__ = "drivers"

    id = Column(Integer, primary_key=True, nullable=False)
    longitude = Column(Float, nullable=False)
    latitude = Column(Float, nullable=False)
    car_mark = Column(String, nullable=False)
    car_plate_number = Column(String, nullable=False)

    def __str__(self):
        return self.email


auth_group_permission = Table(  # Many-to-many third-party tables are actually generated by themselves. .
    'fastapi_auth_group_permission',
    Base.metadata,
    Column("id", Integer, primary_key=True, index=True),
    Column("group_id", Integer, ForeignKey("fastapi_auth_group.id")),
    Column("codename", String(100), ForeignKey(
        "fastapi_auth_permission.codename")),
    UniqueConstraint('group_id', 'codename',
                     name='idx_group_id_permission_id'),
)


class Permission(Base):
    __tablename__ = 'fastapi_auth_permission'
    name = Column(String(128), unique=True, index=True,
                  comment="Permission Name")  # Permission name
    # The permission field is also the field for us to judge the permission input
    codename = Column(
        String(100), comment="Permission Field", primary_key=True)
    groups = relationship("Group", backref="permissions",
                          secondary=auth_group_permission)

    def __str__(self):
        return self.name


class EmailCode(Base, TimestampMixin):
    __tablename__ = 'email_code'
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String(100), nullable=False, comment="email")
    user_id = Column(Integer, ForeignKey("users.id"))
    code = Column(String(100), nullable=False, comment="code")
