from src.database import Base
from sqlalchemy import Column, Integer, String, ForeignKey, Boolean, Table, UniqueConstraint, text
from sqlalchemy.orm import relationship

class Group(Base):
    __tablename__ = 'fastapi_auth_group'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(150), unique=True, index=True, comment="group name")
    def __str__(self):
        return self.name

class Users(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, nullable=False)
    email = Column(String, nullable=False)
    hashed_password = Column(String, nullable=False)
    is_superuser = Column(Boolean, server_default=text('false'), comment="Are you a super administrator")
    is_active = Column(Boolean, server_default=text('true'), comment="Whether to engrave to log in")
    is_delete=Column(Boolean, server_default=text('false'), comment="delete or not")
    group_id=Column(Integer, ForeignKey("fastapi_auth_group.id"))

    def __str__(self):
        return self.email
    
auth_group_permission = Table(  # Many-to-many third-party tables are actually generated by themselves. .
    'fastapi_auth_group_permission',
    Base.metadata,
    Column("id",Integer,primary_key=True,index=True),
    Column("group_id", Integer, ForeignKey("fastapi_auth_group.id")),
    Column("codename", String(100), ForeignKey("fastapi_auth_permission.codename")),
    UniqueConstraint('group_id', 'codename', name='idx_group_id_permission_id'),
)

class Permission(Base):
    __tablename__ = 'fastapi_auth_permission'
    name = Column(String(128), unique=True, index=True, comment="Permission Name")  # Permission name
    codename = Column(String(100), comment="Permission Field",primary_key=True)  # The permission field is also the field for us to judge the permission input
    groups = relationship("Group", backref="permissions", secondary=auth_group_permission)

    def __str__(self):
        return self.name
